Для начала нужно прописать в терминале "git init" для инициализации папки

Затем добавляем все файлы которые есть "git add ."

Потом пишем комментарий "git commit -m "Initial commit"

Затем добавляем на гитхаб git remote add origin https://github.com/Mullexoll/learnTypeScript.git

Не рекомендуется устанавливать TS глобально, для установки TS локально прописываем
"npm install typescript --save-dev"

Используя файл конфигурации мы сможем уточнить проведение компилятора
npx это скрипт который позволяет выполнить какуюто команду

"npx tsc --init" - эта так оманда которая будет превращать TS код в JS (tsc - typescript compiler)
автоматически создается файл tsconfig.json

Браузер не поддерживает TS, для этого нам нужно преобразовать TS в JS.
Хорошим тоном будет создание папки "src" где будет исходный код и папки "dist" в которой
будет наш JS-код

Создаём TS файл в папке src > index.ts

let a = false; - мы присваиваем переменной начальный тип boolean
a = true; - здесь мы можем его изменить 
a = 1; но при присвоении той же переменной новый,  числовой тип, будет ошибка
т.к на начальном этапе мы присвоили переменной булевое значение.

Для того что бы точно определить тип переменной пишем:

let a: boolean = false;

Для того что бы посмотреть как выглядит код в формате JS в терминале прописываем:
"npx tsc"

JS файл нам не нужен, пр необходимости мы всегда его можем получить из TS

Далее ищем строку в файле tsconfig.json >  // "outDir": "./",
и пишем в ней "outDir": "./dist",

Это делается для того что бы наш файл js не добавлялся в git, в итоге при прописывании
"npx tsc" файл JS добавляется в папку dist. При этом если у нас будет несколько файлов TS
при "npx tsc" файлы будут добавлятся в папку dist.

let a: boolean = false;
let n: number;
let s: string;

Для того что бы создать массив, нужно заключить в квадратные скобки
let arrN: number[] - массив чисел;
let arrB: boolean[] - масив булевых значений;
let arrS: string[] - массив строк;
